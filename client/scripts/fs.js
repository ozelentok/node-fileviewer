// Generated by CoffeeScript 1.6.3
(function() {
  var FV;

  FV = {};

  FV.FileItem = Backbone.Model.extend({
    defaults: {
      name: 'File',
      uri: '/file/',
      isDir: false,
      size: 1
    }
  });

  FV.FileList = Backbone.Collection.extend({
    model: FV.FileItem
  });

  FV.FileView = Backbone.View.extend({
    tagName: 'li',
    render: function() {
      var readableSize;
      if (this.model.get('isDir')) {
        this.$el.html("<img src=\"img/directory.png\"><a class=\"filename\">" + (this.model.get('name')) + "</span>");
      } else {
        readableSize = this.humanSize(this.model.get('size'));
        this.$el.html("<img src=\"img/file.png\" /><a href=\"/file" + (this.model.get('uri')) + "\" class=\"filename\">" + (this.model.get('name')) + "</a><span class=\"filesize\">" + readableSize + "</span>");
      }
      return this;
    },
    humanSize: function(size) {
      var type, types, _i, _len;
      types = ['Bytes', 'KB', 'MB'];
      for (_i = 0, _len = types.length; _i < _len; _i++) {
        type = types[_i];
        if (size < 1024) {
          return "" + (size.toFixed(1)) + " " + type;
        } else {
          size /= 1024;
        }
      }
      return "" + (size.toFixed(1)) + " GB";
    }
  });

  FV.FileMainView = Backbone.View.extend({
    el: $('#main'),
    initialize: function() {
      FV.fileList = new FV.FileList();
      this.listenTo(FV.fileList, 'reset', this.render);
      this.pathHeader = this.$('#current_path');
      this.list = this.$('#file_list');
      this.dirAjaxHandler('/');
    },
    dirAjaxHandler: function(path) {
      var _this = this;
      $.ajax({
        url: '/dir' + path,
        type: 'GET',
        dataType: 'json',
        success: function(data) {
          return _this.updatePathAndFiles(data, path);
        }
      });
    },
    updatePathAndFiles: function(data, path) {
      var file, item, newItems, _i, _len;
      newItems = [];
      if (path !== '/') {
        newItems.push({
          name: 'Up to heigher directory',
          uri: this.parentDir(path),
          isDir: true,
          size: -1
        });
      }
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        file = data[_i];
        item = new FV.FileItem(file);
        newItems.push(item);
      }
      FV.path = path;
      FV.fileList.reset(newItems);
    },
    parentDir: function(dirpath) {
      var i, _i, _ref;
      for (i = _i = _ref = dirpath.length - 2; _i >= 0; i = _i += -1) {
        if (dirpath[i] === '/') {
          return dirpath.slice(0, i + 1);
        }
      }
      return dirpath;
    },
    render: function() {
      var _this = this;
      this.list.empty();
      this.pathHeader.html(FV.path);
      FV.fileList.each(function(item) {
        var elem, uri, view;
        view = new FV.FileView({
          model: item
        });
        elem = view.render().el;
        if (item.get('isDir')) {
          uri = item.get('uri');
          $(elem).click(function() {
            return _this.dirAjaxHandler(uri);
          });
        }
        return _this.list.append(elem);
      });
      return this;
    }
  });

  $(document).ready(function() {
    var app;
    window.FV = FV;
    app = new FV.FileMainView();
  });

}).call(this);
