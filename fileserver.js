// Generated by CoffeeScript 1.6.3
(function() {
  var FileServer, Validator, fileServer, fs, http, mime, path, settings, url, validator;

  http = require('http');

  url = require('url');

  path = require('path');

  fs = require('fs');

  mime = require('mime');

  FileServer = (function() {
    FileServer.prototype.dirRegex = new RegExp('^/dir/([^\0]*)$');

    FileServer.prototype.fileRegex = new RegExp('^/file/([^\0]+)$');

    function FileServer(settings) {
      this.publicDir = settings.directory;
      this.port = settings.port;
      this.clientDir = settings.clientDir || 'client';
    }

    FileServer.prototype.startServer = function() {
      var _this = this;
      http.createServer(function(req, res) {
        var regexMatch, uri;
        uri = url.parse(req.url).pathname;
        uri = unescape(uri);
        regexMatch = _this.dirRegex.exec(uri);
        if (regexMatch !== null) {
          console.log("Sending Dir: " + uri);
          _this.checkDirExistenceAndHandle(regexMatch[1], res);
          return;
        }
        regexMatch = _this.fileRegex.exec(uri);
        if (regexMatch !== null) {
          console.log("Sending File: " + uri);
          _this.checkFileExistenceAndHandle(regexMatch[1], res);
          return;
        }
        console.log("Sending Client File: " + uri);
        _this.checkClientFileExistenceAndHandle(uri, res);
      }).listen(this.port);
      console.log("Server open on port " + this.port);
      return console.log("Folder used: " + this.publicDir);
    };

    FileServer.prototype.checkClientFileExistenceAndHandle = function(clientUri, res) {
      var realPath,
        _this = this;
      if (clientUri === '/') {
        clientUri = 'index.html';
      }
      realPath = path.join(this.clientDir, clientUri);
      fs.exists(realPath, function(doesExist) {
        if (!doesExist) {
          _this.sendErrorNotFound(res);
          return;
        }
        fs.stat(realPath, function(err, stats) {
          if (err) {
            return _this.sendErrorInternal(res);
          } else if (stats.isDirectory()) {
            return _this.sendErrorInternal(res);
          } else {
            return _this.sendClient(realPath, res);
          }
        });
      });
    };

    FileServer.prototype.checkDirExistenceAndHandle = function(dirUri, res) {
      var realPath,
        _this = this;
      realPath = path.join(this.publicDir, dirUri);
      fs.exists(realPath, function(doesExist) {
        if (!doesExist) {
          _this.sendErrorNotFound(res);
          return;
        }
        fs.stat(realPath, function(err, stats) {
          if (err) {
            return _this.sendErrorInternal(res);
          } else if (stats.isDirectory()) {
            return _this.sendDirContents(realPath, res);
          } else {
            return _this.sendErrorNotFound(res);
          }
        });
      });
    };

    FileServer.prototype.checkFileExistenceAndHandle = function(fileUri, res) {
      var realPath,
        _this = this;
      realPath = path.join(this.publicDir, fileUri);
      fs.exists(realPath, function(doesExist) {
        if (!doesExist) {
          _this.sendErrorNotFound(res);
          return;
        }
        fs.stat(realPath, function(err, stats) {
          if (err) {
            return _this.sendErrorNotFound(res);
          } else if (stats.isFile()) {
            return _this.sendFile(realPath, res);
          } else {
            return _this.sendErrorNotFound(res);
          }
        });
      });
    };

    FileServer.prototype.sendClient = function(realPath, res) {
      var _this = this;
      fs.readFile(realPath, function(err, data) {
        if (err) {
          _this.sendErrorInternal(res);
          return;
        }
        res.writeHead(200, {
          'Content-Type': mime.lookup(realPath)
        });
        res.write(data);
        return res.end();
      });
    };

    FileServer.prototype.sendDirContents = function(realPath, res) {
      var _this = this;
      fs.readdir(realPath, function(err, files) {
        var dataToSend, fileSize, fileStats, i, isDir, uri, uriStart, _i, _ref;
        if (err) {
          _this.sendErrorInternal(res);
          return;
        }
        dataToSend = [];
        for (i = _i = 0, _ref = files.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          fileStats = fs.statSync(path.join(realPath, files[i]));
          isDir = fileStats.isDirectory();
          if (isDir) {
            uriStart = realPath.replace(_this.publicDir, '/dir/');
            fileSize = 0;
          } else {
            uriStart = realPath.replace(_this.publicDir, '/file/');
            fileSize = fileStats.size;
          }
          uri = path.join(uriStart, files[i]);
          dataToSend[i] = {
            name: files[i],
            uri: uri,
            isDir: isDir,
            size: fileSize
          };
        }
        res.writeHead(200, {
          'Content-Type': 'application/json'
        });
        res.write(JSON.stringify(dataToSend));
        return res.end();
      });
    };

    FileServer.prototype.sendFile = function(filepath, res) {
      var stream;
      stream = fs.createReadStream(filepath);
      res.writeHead(200, {
        'Content-Type': mime.lookup(filepath)
      });
      stream.pipe(res, {
        end: true
      });
    };

    FileServer.prototype.sendErrorNotFound = function(res) {
      res.writeHead(404);
      return res.end();
    };

    FileServer.prototype.sendErrorInternal = function(res) {
      res.writeHead(500);
      return res.end();
    };

    return FileServer;

  })();

  Validator = (function() {
    function Validator() {}

    Validator.prototype.validateArgs = function() {
      var dir, port;
      if (process.argv.length <= 2) {
        console.log('Missing directory operand and optional port');
        return false;
      }
      dir = process.argv[2];
      if (process.argv.length === 3) {
        port = 4567;
      } else {
        port = process.argv[3];
      }
      if (this.validatePathPort(dir, port)) {
        return {
          directory: dir,
          port: port
        };
      }
      return false;
    };

    Validator.prototype.validatePathPort = function(dirpath, port) {
      if (!this.validateDir(dirpath)) {
        console.log('Directory path is bad');
        return false;
      }
      if (!this.validatePort(port)) {
        console.log('Port must be a number between 1 to 65535');
        return false;
      }
      return true;
    };

    Validator.prototype.validateDir = function(dirpath) {
      if (fs.existsSync(dirpath)) {
        return fs.statSync(dirpath).isDirectory();
      }
      return false;
    };

    Validator.prototype.validatePort = function(port) {
      var num;
      num = parseInt(port);
      if (isNaN(num)) {
        return false;
      }
      if (num < 1 || num > 65535) {
        return false;
      }
      return true;
    };

    return Validator;

  })();

  validator = new Validator();

  settings = validator.validateArgs();

  if (settings) {
    fileServer = new FileServer(settings);
    fileServer.startServer();
  }

}).call(this);
