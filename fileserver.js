// Generated by CoffeeScript 1.6.3
(function() {
  var FileServer, dir, fileServer, fs, http, path, port, url;

  http = require('http');

  url = require('url');

  path = require('path');

  fs = require('fs');

  FileServer = (function() {
    FileServer.prototype.clientFilePaths = {
      '/': 'client/index.html',
      '/style.css': 'client/style.css',
      '/fs.js': 'client/fs.js'
    };

    FileServer.prototype.clientContentTypes = {
      '/': 'text/html',
      '/style.css': 'text/css',
      '/fs.js': 'application/javascript'
    };

    FileServer.prototype.dirRegex = new RegExp('^/dir/([a-zA-Z0-9_ /\.]*)$');

    FileServer.prototype.fileRegex = new RegExp('^/file/([a-zA-Z0-9_ /\.]+)$');

    function FileServer(port, publicDir) {
      this.port = port;
      this.publicDir = publicDir;
    }

    FileServer.prototype.startServer = function() {
      var _this = this;
      http.createServer(function(req, res) {
        var realPath, regexMatch, uri;
        uri = url.parse(req.url).pathname;
        uri = unescape(uri);
        if (_this.clientFilePaths.hasOwnProperty(uri)) {
          console.log("Sending Client File: " + uri);
          _this.sendClient(uri, res);
          return;
        }
        regexMatch = _this.dirRegex.exec(uri);
        if (regexMatch !== null) {
          console.log("Sending Dir: " + uri);
          realPath = path.join(_this.publicDir, regexMatch[1]);
          _this.checkDirExistenceAndHandle(realPath, res);
          return;
        }
        regexMatch = _this.fileRegex.exec(uri);
        if (regexMatch !== null) {
          console.log("Sending File: " + uri);
          realPath = path.join(_this.publicDir, regexMatch[1]);
          _this.checkFileExistenceAndHandle(realPath, res);
          return;
        }
        return _this.sendErrorNotFound(res);
      }).listen(this.port);
      console.log("Server open on port " + this.port);
      return console.log("Folder used: " + this.publicDir);
    };

    FileServer.prototype.checkDirExistenceAndHandle = function(realPath, res) {
      var _this = this;
      fs.exists(realPath, function(doesExist) {
        if (!doesExist) {
          _this.sendErrorNotFound(res);
          return;
        }
        fs.stat(realPath, function(err, stats) {
          if (err) {
            return _this.sendErrorNotFound(res);
          } else if (stats.isDirectory()) {
            return _this.sendDirContents(realPath, res);
          } else {
            return _this.sendErrorNotFound(res);
          }
        });
      });
    };

    FileServer.prototype.checkFileExistenceAndHandle = function(realPath, res) {
      var _this = this;
      fs.exists(realPath, function(doesExist) {
        if (!doesExist) {
          _this.sendErrorNotFound(res);
          return;
        }
        fs.stat(realPath, function(err, stats) {
          if (err) {
            return _this.sendErrorNotFound(res);
          } else if (stats.isFile()) {
            return _this.sendFile(realPath, res);
          } else {
            return _this.sendErrorNotFound(res);
          }
        });
      });
    };

    FileServer.prototype.sendClient = function(uri, res) {
      var _this = this;
      fs.readFile(this.clientFilePaths[uri], function(err, data) {
        if (err) {
          _this.sendErrorInternal(res);
          return;
        }
        res.writeHead(200, {
          'Content-Type': _this.clientContentTypes[uri]
        });
        res.write(data);
        return res.end();
      });
    };

    FileServer.prototype.sendDirContents = function(realPath, res) {
      var _this = this;
      fs.readdir(realPath, function(err, files) {
        var dataToSend, i, isDir, uri, uriStart, _i, _ref;
        if (err) {
          _this.sendErrorInternal(res);
          return;
        }
        dataToSend = [];
        for (i = _i = 0, _ref = files.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          isDir = fs.statSync(path.join(realPath, files[i])).isDirectory();
          if (isDir) {
            uriStart = realPath.replace(_this.publicDir, '/dir');
          } else {
            uriStart = realPath.replace(_this.publicDir, '/file');
          }
          uri = path.join(uriStart, files[i]);
          dataToSend[i] = {
            name: files[i],
            uri: uri,
            isDir: isDir
          };
        }
        res.writeHead(200, {
          'Content-Type': 'application/json'
        });
        res.write(JSON.stringify(dataToSend));
        return res.end();
      });
    };

    FileServer.prototype.sendFile = function(filepath, res) {
      var stream;
      console.log("Sending " + filepath);
      stream = fs.createReadStream(filepath);
      res.writeHead(200);
      stream.pipe(res, {
        end: true
      });
    };

    FileServer.prototype.sendErrorNotFound = function(res) {
      res.writeHead(404);
      return res.end();
    };

    FileServer.prototype.sendErrorInternal = function(res) {
      res.writeHead(500);
      return res.end();
    };

    return FileServer;

  })();

  dir = process.cwd();

  port = 4567;

  fileServer = new FileServer(port, dir);

  fileServer.startServer();

}).call(this);
